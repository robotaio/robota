{"/guide/core-concepts":{"title":"핵심 개념","data":{"":"Robota 라이브러리는 다음과 같은 핵심 개념을 기반으로 합니다.","주요-구성-요소#주요 구성 요소":"","1-robota-클래스#1. Robota 클래스":"전체 라이브러리의 진입점입니다. AI 에이전트를 초기화하고 실행할 수 있는 인터페이스를 제공합니다.\nconst robota = new Robota({\n  provider: new OpenAIProvider({ /* 설정 */ }),\n  // 추가 설정\n});","2-제공업체-providers#2. 제공업체 (Providers)":"다양한 AI 서비스를 사용할 수 있도록 하는 추상화 계층입니다. 각 제공업체는 특정 LLM API(OpenAI, Anthropic 등)와 통신하는 방법을 제공합니다.\n// OpenAI 제공업체\nconst openaiProvider = new OpenAIProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n  model: 'gpt-4'\n});\n// Anthropic 제공업체\nconst anthropicProvider = new AnthropicProvider({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n  model: 'claude-3-opus'\n});","3-함수-호출-function-calling#3. 함수 호출 (Function Calling)":"AI 모델이 특정 함수를 호출할 수 있도록 합니다. 이를 통해 외부 API 호출, 데이터베이스 조회, 파일 시스템 액세스 등의 작업을 수행할 수 있습니다.\n// 함수 정의\nconst functions = {\n  searchDatabase: async (query: string) => {\n    // 데이터베이스 검색 로직\n    return { results: ['결과1', '결과2'] };\n  }\n};\n// 함수 등록\nrobota.registerFunctions(functions);","4-도구-tools#4. 도구 (Tools)":"도구는 함수 호출의 확장된 개념으로, 더 복잡하고 구조화된 기능을 제공합니다. 각 도구는 메타데이터, 파라미터 검증, 실행 로직을 포함합니다.\nconst calculator = new Tool({\n  name: 'calculator',\n  description: '수학 계산을 수행합니다',\n  parameters: z.object({\n    expression: z.string().describe('계산할 수식')\n  }),\n  execute: async ({ expression }) => {\n    return { result: eval(expression) };\n  }\n});\nrobota.registerTools([calculator]);","5-에이전트-agents#5. 에이전트 (Agents)":"에이전트는 목표를 달성하기 위해 도구를 사용하고 추론하는 AI 시스템입니다. Robota는 다양한 에이전트 패턴을 구현할 수 있습니다.\nconst researchAgent = new Agent({\n  name: '리서치 에이전트',\n  description: '웹에서 정보를 검색하고 요약하는 에이전트',\n  tools: [webSearch, summarize],\n  provider: openaiProvider\n});","6-메모리-memory#6. 메모리 (Memory)":"대화 기록을 저장하고 관리하는 시스템으로, 에이전트가 이전 상호작용을 기억하고 참조할 수 있게 합니다.\nconst memory = new ConversationMemory();\nconst robota = new Robota({\n  provider: openaiProvider,\n  memory\n});","7-모델-컨텍스트-프로토콜-model-context-protocol#7. 모델 컨텍스트 프로토콜 (Model Context Protocol)":"특정 모델과 통신하기 위한 표준화된 방법을 제공하는 프로토콜입니다. 다양한 모델 제공업체 간의 호환성을 보장합니다.","8-openapi-통합#8. OpenAPI 통합":"Swagger/OpenAPI 스펙에서 자동으로 도구와 함수를 생성하는 기능을 제공합니다.\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json');\nrobota.registerTools(apiTools);","라이브러리-아키텍처#라이브러리 아키텍처":"Robota는 다음과 같은 계층 구조로 설계되었습니다:\n코어 계층: 기본 클래스와 인터페이스\n제공업체 계층: 다양한 LLM API 통합\n도구 계층: 함수 및 도구 추상화\n에이전트 계층: 추론 및 계획 패턴\n유틸리티 계층: 도우미 함수 및 공통 기능\n이 구조는 모듈성과 확장성을 극대화하여 다양한 AI 에이전트 시나리오를 지원합니다."}},"/guide/function-calling":{"title":"함수 호출 (Function Calling)","data":{"":"함수 호출은 AI 모델이 사전 정의된 함수를 호출할 수 있게 하는 기능입니다. 이를 통해 AI는 외부 시스템과 상호작용하고, 데이터를 검색하거나 계산을 수행할 수 있습니다.","기본적인-함수-호출#기본적인 함수 호출":"Robota에서 함수를 정의하고 등록하는 방법은 다음과 같습니다:\nimport { Robota, OpenAIProvider } from 'robota';\n// Robota 인스턴스 생성\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n// 함수 정의\nconst functions = {\n  // 날씨 검색 함수\n  getWeather: async (location: string, unit: 'celsius' | 'fahrenheit' = 'celsius') => {\n    console.log(`${location}의 날씨를 ${unit} 단위로 검색 중...`);\n    // 실제 구현에서는 날씨 API 호출\n    return { \n      temperature: 25, \n      condition: '맑음', \n      humidity: 60,\n      unit\n    };\n  },\n  \n  // 수학 계산 함수\n  calculate: async (expression: string) => {\n    console.log(`계산 중: ${expression}`);\n    // 주의: eval은 보안상 위험할 수 있습니다. 실제 사용시 안전한 대안을 고려하세요.\n    return { result: eval(expression) };\n  }\n};\n// 함수 등록\nrobota.registerFunctions(functions);\n// 실행\nconst result = await robota.run('서울의 날씨가 어떤지 알려주고, 25 + 15의 계산 결과도 보여줘.');\nconsole.log(result);","함수-스키마-자동-추출#함수 스키마 자동 추출":"Robota는 타입스크립트의 타입 정보를 사용하여 함수의 매개변수와 반환 타입에 대한 스키마를 자동으로 생성합니다. 이렇게 생성된 스키마는 AI 모델에게 함수의 사용법을 알려주는 데 사용됩니다.","복잡한-매개변수를-가진-함수#복잡한 매개변수를 가진 함수":"객체나 배열과 같은 복잡한 매개변수를 가진 함수도 정의할 수 있습니다:\n// 복잡한 매개변수를 가진 함수\nconst functions = {\n  createUser: async (userData: {\n    name: string;\n    email: string;\n    age: number;\n    preferences?: {\n      theme: 'light' | 'dark';\n      notifications: boolean;\n    }\n  }) => {\n    console.log(`사용자 생성 중: ${userData.name}`);\n    return { \n      id: 'user-123',\n      createdAt: new Date().toISOString(),\n      ...userData\n    };\n  }\n};\nrobota.registerFunctions(functions);","zod를-사용한-스키마-검증#zod를 사용한 스키마 검증":"보다 강력한 매개변수 검증을 위해 zod 라이브러리를 사용할 수 있습니다:\nimport { z } from 'zod';\nimport { Robota, OpenAIProvider, createFunction } from 'robota';\n// zod 스키마를 사용한 함수 생성\nconst sendEmail = createFunction({\n  name: 'sendEmail',\n  description: '지정된 수신자에게 이메일을 보냅니다',\n  parameters: z.object({\n    to: z.string().email('유효한 이메일 주소가 필요합니다'),\n    subject: z.string().min(1, '제목은 비어있을 수 없습니다'),\n    body: z.string(),\n    cc: z.array(z.string().email()).optional(),\n    bcc: z.array(z.string().email()).optional(),\n    attachments: z.array(z.string().url()).optional()\n  }),\n  execute: async (params) => {\n    console.log(`이메일 전송 중: ${params.subject}`);\n    // 실제 이메일 전송 로직\n    return { \n      status: 'sent',\n      messageId: 'msg-' + Math.random().toString(36).substring(2, 9)\n    };\n  }\n});\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n// 함수 등록\nrobota.registerFunctions({ sendEmail });","함수-호출-모드#함수 호출 모드":"Robota는 다양한 함수 호출 모드를 지원합니다:","자동-모드-기본값#자동 모드 (기본값)":"AI가 필요에 따라 함수를 자동으로 호출합니다:\nconst result = await robota.run('내일 서울의 날씨가 어떤지 알려줘', {\n  functionCallMode: 'auto' // 기본값이므로 생략 가능\n});","강제-모드#강제 모드":"특정 함수를 강제로 호출하도록 지시합니다:\nconst result = await robota.run('내일 서울의 날씨가 어떤지 알려줘', {\n  functionCallMode: 'force',\n  forcedFunction: 'getWeather',\n  forcedArguments: { location: '서울', unit: 'celsius' }\n});","비활성화-모드#비활성화 모드":"함수 호출을 완전히 비활성화합니다:\nconst result = await robota.run('안녕하세요!', {\n  functionCallMode: 'disabled'\n});","함수-호출-추적-및-로깅#함수 호출 추적 및 로깅":"함수 호출을 추적하고 로깅할 수 있습니다:\nconst robota = new Robota({\n  provider: new OpenAIProvider({ /* 설정 */ }),\n  onFunctionCall: (functionName, args, result) => {\n    console.log(`함수 호출: ${functionName}`);\n    console.log('인자:', args);\n    console.log('결과:', result);\n  }\n});","함수-호출-제한-및-안전성#함수 호출 제한 및 안전성":"보안과 안전성을 위해 함수 호출에 제한을 둘 수 있습니다:\nconst robota = new Robota({\n  provider: new OpenAIProvider({ /* 설정 */ }),\n  functionCallConfig: {\n    maxCalls: 5, // 최대 함수 호출 횟수\n    timeout: 10000, // 함수 호출 타임아웃 (ms)\n    allowedFunctions: ['getWeather', 'calculate'] // 허용된 함수 목록\n  }\n});"}},"/guide/getting-started":{"title":"시작하기","data":{"설치#설치":"npm을 사용하여 핵심 패키지 설치:\nnpm install @robota/core\n필요한 제공업체 패키지 설치:\n# OpenAI 제공업체\nnpm install @robota/openai\n# Anthropic 제공업체\nnpm install @robota/anthropic\n# LangChain 제공업체\nnpm install @robota/langchain\n# Replicate 제공업체\nnpm install @robota/replicate\n# 도구 패키지\nnpm install @robota/tools\n또는 pnpm 사용:\npnpm add @robota/core @robota/openai","기본-사용법#기본 사용법":"가장 기본적인 형태로 Robota를 설정하고 사용하는 방법은 다음과 같습니다:\nimport { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/openai';\n// 환경 변수에서 API 키 가져오기\nconst apiKey = process.env.OPENAI_API_KEY;\nif (!apiKey) {\n  throw new Error('OPENAI_API_KEY 환경 변수가 필요합니다');\n}\n// Robota 인스턴스 생성\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey,\n    model: 'gpt-4'\n  })\n});\n// 간단한 질문 실행\nconst result = await robota.run('타입스크립트란 무엇인가요?');\nconsole.log(result);","함수-호출-사용#함수 호출 사용":"AI가 함수를 호출할 수 있도록 설정:\nimport { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/openai';\n// Robota 인스턴스 생성\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n// 함수 정의\nconst functions = {\n  getWeather: async (location: string) => {\n    // 실제 구현에서는 여기서 날씨 API를 호출\n    console.log(`${location}의 날씨를 가져오는 중...`);\n    return { temperature: 20, condition: '맑음' };\n  },\n  \n  getCurrentTime: async (timezone: string = 'Asia/Seoul') => {\n    console.log(`${timezone}의 현재 시간을 가져오는 중...`);\n    return new Date().toLocaleString('ko-KR', { timeZone: timezone });\n  }\n};\n// 함수 등록\nrobota.registerFunctions(functions);\n// 실행\nconst result = await robota.run('서울의 날씨가 어떤지 알려주고, 현재 시간도 알려줘.');\nconsole.log(result);","스트리밍-응답#스트리밍 응답":"스트리밍 응답을 사용하여 실시간으로 결과 받기:\nimport { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/openai';\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n// 스트리밍 응답 처리\nconst stream = await robota.runStream('타입스크립트의 장점에 대해 5가지 알려줘');\nfor await (const chunk of stream) {\n  process.stdout.write(chunk.content || '');\n}","다음-단계#다음 단계":"핵심 개념을 읽고 Robota의 구성 요소를 이해하세요.\n다양한 제공업체에 대해 알아보세요.\n함수 호출에 대한 자세한 내용을 확인하세요."}},"/guide/providers":{"title":"제공업체 (Providers)","data":{"":"Robota는 다양한 AI 제공업체를 지원하여 여러 LLM 서비스를 활용할 수 있게 합니다. 각 제공업체는 특정 API와 통신하고 해당 서비스의 고유한 기능을 활용할 수 있도록 설계되었습니다.","지원되는-제공업체#지원되는 제공업체":"","openai#OpenAI":"OpenAI의 GPT 모델과 통합하기 위한 제공업체입니다. GPT-3.5, GPT-4 등 다양한 모델을 지원합니다.자세한 내용은 OpenAI 제공업체 문서를 참조하세요.","anthropic#Anthropic":"Anthropic의 Claude 모델과 통합하기 위한 제공업체입니다. Claude, Claude Instant 등의 모델을 지원합니다.자세한 내용은 Anthropic 제공업체 문서를 참조하세요.","langchain#LangChain":"LangChain 프레임워크와 통합하기 위한 제공업체로, 다양한 LangChain 모델과 체인을 Robota에서 활용할 수 있습니다.자세한 내용은 LangChain 제공업체 문서를 참조하세요.","replicate#Replicate":"Replicate 플랫폼의 다양한 오픈소스 모델을 활용할 수 있는 제공업체입니다.자세한 내용은 Replicate 제공업체 문서를 참조하세요.","제공업체-사용하기#제공업체 사용하기":"각 제공업체는 일관된 인터페이스를 통해 사용됩니다:\nimport { Robota, OpenAIProvider } from 'robota';\n// OpenAI 제공업체 설정\nconst provider = new OpenAIProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n  model: 'gpt-4',\n  temperature: 0.7\n});\n// Robota 인스턴스에 제공업체 연결\nconst robota = new Robota({ provider });\n// 실행\nconst result = await robota.run('안녕하세요! 오늘 날씨가 어때요?');","여러-제공업체-사용하기#여러 제공업체 사용하기":"여러 제공업체를 동시에 사용하여 다양한 AI 모델의 장점을 활용할 수 있습니다:\nimport { Robota, OpenAIProvider, AnthropicProvider, ProviderRouter } from 'robota';\n// 여러 제공업체 설정\nconst openaiProvider = new OpenAIProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n  model: 'gpt-4'\n});\nconst anthropicProvider = new AnthropicProvider({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n  model: 'claude-3-opus'\n});\n// 라우터를 통해 여러 제공업체 사용\nconst router = new ProviderRouter({\n  defaultProvider: openaiProvider,\n  providers: {\n    openai: openaiProvider,\n    anthropic: anthropicProvider\n  },\n  routingStrategy: (message, context) => {\n    // 메시지 내용에 따라 적절한 제공업체 선택\n    if (message.includes('창의적') || message.includes('creative')) {\n      return 'anthropic';\n    }\n    return 'openai'; // 기본값\n  }\n});\n// 라우터를 제공업체로 사용\nconst robota = new Robota({ provider: router });\n// 각 질문은 적절한 제공업체로 라우팅됨\nconst creativeResult = await robota.run('창의적인 시를 써줘');  // Anthropic으로 라우팅\nconst factualResult = await robota.run('파이의 값은 얼마인가요?');  // OpenAI로 라우팅","제공업체-구성-옵션#제공업체 구성 옵션":"각 제공업체는 서비스별 고유 구성 옵션을 지원합니다. 공통적으로 지원되는 기본 옵션은 다음과 같습니다:\ninterface ProviderOptions {\n  model: string;       // 사용할 모델 이름\n  temperature?: number; // 응답의 무작위성/창의성 (0~1)\n  maxTokens?: number;   // 최대 생성 토큰 수\n  stopSequences?: string[]; // 생성 중지 시퀀스\n  streamMode?: boolean; // 스트리밍 모드 활성화 여부\n}","커스텀-제공업체-만들기#커스텀 제공업체 만들기":"자체 AI 서비스나 지원되지 않는 서비스를 통합하려면 커스텀 제공업체를 만들 수 있습니다.기본 제공업체 인터페이스를 구현하여 시작할 수 있습니다:\nimport { BaseProvider, ProviderResponse, ProviderOptions } from 'robota';\nclass CustomProvider extends BaseProvider {\n  constructor(options) {\n    super(options);\n    // 초기화 로직\n  }\n  async generateCompletion(prompt, options) {\n    // API 호출 구현\n    const response = await this.callCustomAPI(prompt, options);\n    \n    return {\n      content: response.text,\n      usage: {\n        promptTokens: response.promptTokens,\n        completionTokens: response.completionTokens,\n        totalTokens: response.totalTokens\n      }\n    };\n  }\n  async generateCompletionStream(prompt, options) {\n    // 스트리밍 API 호출 구현\n    const stream = this.callCustomAPIStream(prompt, options);\n    return stream;\n  }\n}\n자세한 커스텀 제공업체 구현 방법은 커스텀 제공업체 문서를 참조하세요."}},"/":{"title":"Robota","data":{"":"쉽게 Agentic AI를 만들 수 있는 TypeScript 라이브러리입니다.","주요-기능#주요 기능":"다양한 AI 제공업체 지원 - OpenAI, Anthropic, LangChain, Replicate 등 다양한 AI 제공업체를 통합하여 사용할 수 있습니다.\n강력한 함수 호출 기능 - AI가 함수를 직접 호출하여 외부 API, 데이터베이스 등과 상호작용할 수 있습니다.\n모듈식 설계 - 필요한 기능만 가져와 사용할 수 있는 모듈식 설계로 가볍고 유연한 구현이 가능합니다.\nOpenAPI 통합 - OpenAPI 스펙에서 자동으로 AI 도구를 생성하여 기존 API를 쉽게 AI에 연결할 수 있습니다.\n스마트한 에이전트 구축 - 목표를 달성하기 위해 자율적으로 판단하고 행동하는 AI 에이전트를 쉽게 만들 수 있습니다.\n타입 안정성 - TypeScript로 작성되어 타입 안정성을 보장하고 IDE의 자동 완성 기능을 활용할 수 있습니다.","시작하기#시작하기":"Robota를 프로젝트에 추가하려면 다음 명령어를 실행하세요:\nnpm install robota","간단한-예제#간단한 예제":"import { createAgent } from 'robota';\nconst agent = createAgent({\n  provider: 'openai',\n  model: 'gpt-4',\n  apiKey: process.env.OPENAI_API_KEY\n});\nconst response = await agent.chat('안녕하세요, 오늘 날씨가 어때요?');\nconsole.log(response);\n전체 시작 가이드 보기"}}}