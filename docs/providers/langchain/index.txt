3:I[8822,[],""]
5:I[7424,[],""]
6:I[9373,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
7:I[6519,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
8:I[4575,["696","static/chunks/696-d43650737205c45a.js","931","static/chunks/app/page-718fde6e5e1a891e.js"],""]
4:["slug","providers/langchain","c"]
0:["GlAq3AXZPAL2oW9VuTyQj",[[["",{"children":["docs",{"children":[["slug","providers/langchain","c"],{"children":["__PAGE__?{\"slug\":[\"providers\",\"langchain\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","providers/langchain","c"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]}]]}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$L9",null]]]]
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"langchain-제공자","children":["$","a",null,{"href":"#langchain-제공자","children":"LangChain 제공자"}]}],"\n",["$","p",null,{"children":"LangChain 프레임워크와 통합하기 위한 제공자로, 다양한 LangChain 모델과 체인을 Robota에서 활용할 수 있습니다."}],"\n",["$","h2",null,{"id":"특징","children":["$","a",null,{"href":"#특징","children":"특징"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"LangChain 모델, 체인, 에이전트 통합"}],"\n",["$","li",null,{"children":"기존 LangChain 프로젝트와 Robota의 쉬운 통합"}],"\n",["$","li",null,{"children":"LangChain의 다양한 유틸리티와 도구 활용 가능"}],"\n"]}],"\n",["$","h2",null,{"id":"설치","children":["$","a",null,{"href":"#설치","children":"설치"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"npm install @robota/langchain langchain\n"}]}],"\n",["$","h2",null,{"id":"사용법","children":["$","a",null,{"href":"#사용법","children":"사용법"}]}],"\n",["$","h3",null,{"id":"기본-모델-사용","children":["$","a",null,{"href":"#기본-모델-사용","children":"기본 모델 사용"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, LangChainProvider } from 'robota';\nimport { ChatOpenAI } from 'langchain/chat_models/openai';\n\n// LangChain 모델 생성\nconst model = new ChatOpenAI({\n  openAIApiKey: process.env.OPENAI_API_KEY,\n  modelName: 'gpt-4',\n  temperature: 0.7\n});\n\n// LangChain 제공자 초기화\nconst provider = new LangChainProvider({\n  model: model\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요! 오늘 날씨가 어때요?');\nconsole.log(result);\n"}]}],"\n",["$","h3",null,{"id":"체인-사용","children":["$","a",null,{"href":"#체인-사용","children":"체인 사용"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, LangChainProvider } from 'robota';\nimport { ChatOpenAI } from 'langchain/chat_models/openai';\nimport { ConversationChain } from 'langchain/chains';\nimport { BufferMemory } from 'langchain/memory';\n\n// LangChain 모델 생성\nconst model = new ChatOpenAI({\n  openAIApiKey: process.env.OPENAI_API_KEY,\n  modelName: 'gpt-4'\n});\n\n// 메모리와 체인 설정\nconst memory = new BufferMemory();\nconst chain = new ConversationChain({ llm: model, memory });\n\n// LangChain 제공자 초기화 (체인 사용)\nconst provider = new LangChainProvider({\n  chain: chain\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result1 = await robota.run('내 이름은 김철수야.');\nconsole.log(result1);\n\nconst result2 = await robota.run('내 이름이 뭐지?');\nconsole.log(result2); // 메모리 기능으로 이전 대화 기억\n"}]}],"\n",["$","h3",null,{"id":"에이전트-사용","children":["$","a",null,{"href":"#에이전트-사용","children":"에이전트 사용"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, LangChainProvider } from 'robota';\nimport { ChatOpenAI } from 'langchain/chat_models/openai';\nimport { initializeAgentExecutorWithOptions } from 'langchain/agents';\nimport { Calculator } from 'langchain/tools/calculator';\nimport { WebBrowser } from 'langchain/tools/webbrowser';\n\n// LangChain 모델 생성\nconst model = new ChatOpenAI({\n  openAIApiKey: process.env.OPENAI_API_KEY,\n  modelName: 'gpt-4',\n  temperature: 0\n});\n\n// 도구 설정\nconst tools = [\n  new Calculator(),\n  new WebBrowser()\n];\n\n// 에이전트 생성\nconst executor = await initializeAgentExecutorWithOptions(\n  tools,\n  model,\n  {\n    agentType: 'chat-conversational-react-description',\n    verbose: true,\n  }\n);\n\n// LangChain 제공자 초기화 (에이전트 사용)\nconst provider = new LangChainProvider({\n  agent: executor\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('123 * 456은 얼마야?');\nconsole.log(result);\n"}]}],"\n",["$","h2",null,{"id":"제공자-옵션","children":["$","a",null,{"href":"#제공자-옵션","children":"제공자 옵션"}]}],"\n",["$","p",null,{"children":"LangChain 제공자는 다음과 같은 옵션을 지원합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface LangChainProviderOptions extends ProviderOptions {\n  // 다음 중 하나는 반드시 제공해야 함\n  model?: BaseChatModel | BaseLLM; // LangChain 모델\n  chain?: Chain;                   // LangChain 체인\n  agent?: AgentExecutor;           // LangChain 에이전트\n\n  // 선택적 옵션\n  memory?: BaseChatMemory;         // LangChain 메모리 (model 사용 시)\n  verbose?: boolean;               // 상세 로깅 활성화\n}\n"}]}],"\n",["$","h2",null,{"id":"langchain과-robota-통합의-이점","children":["$","a",null,{"href":"#langchain과-robota-통합의-이점","children":"LangChain과 Robota 통합의 이점"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"기능 확장"}],": LangChain의 다양한 도구와 유틸리티를 Robota의 UI/UX와 함께 사용할 수 있습니다."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"기존 투자 보호"}],": 이미 LangChain으로 구축한 프로젝트를 Robota로 쉽게 마이그레이션할 수 있습니다."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"유연성"}],": 특정 작업은 LangChain의 특화된 기능을 활용하고, 나머지는 Robota의 기능을 사용할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"주의사항","children":["$","a",null,{"href":"#주의사항","children":"주의사항"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["LangChain 제공자를 사용할 때는 ",["$","code",null,{"children":"model"}],", ",["$","code",null,{"children":"chain"}],", ",["$","code",null,{"children":"agent"}]," 중 하나를 반드시 제공해야 합니다."]}],"\n",["$","li",null,{"children":"LangChain의 메모리 시스템과 Robota의 메모리 시스템은 별도로 관리됩니다. 필요에 따라 적절한 시스템을 선택하세요."}],"\n",["$","li",null,{"children":"스트리밍은 LangChain 모델이 이를 지원하는 경우에만 작동합니다."}],"\n"]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"langchain - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
