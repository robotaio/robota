3:I[8822,[],""]
5:I[7424,[],""]
6:I[9373,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
7:I[6519,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
8:I[4575,["696","static/chunks/696-d43650737205c45a.js","931","static/chunks/app/page-718fde6e5e1a891e.js"],""]
4:["slug","providers","c"]
0:["PkorAQ6aYv5jnhNRq2ZNi",[[["",{"children":["docs",{"children":[["slug","providers","c"],{"children":["__PAGE__?{\"slug\":[\"providers\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","providers","c"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]}]]}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$L9",null]]]]
a:T550,import { Robota, OpenAIProvider, AnthropicProvider, ProviderRouter } from 'robota';
import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';

// 클라이언트 생성
const openaiClient = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const anthropicClient = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
});

// 여러 제공자 설정
const openaiProvider = new OpenAIProvider({
  model: 'gpt-4',
  client: openaiClient
});

const anthropicProvider = new AnthropicProvider({
  model: 'claude-3-opus',
  client: anthropicClient
});

// 라우터를 통해 여러 제공자 사용
const router = new ProviderRouter({
  defaultProvider: openaiProvider,
  providers: {
    openai: openaiProvider,
    anthropic: anthropicProvider
  },
  routingStrategy: (message, context) => {
    // 메시지 내용에 따라 적절한 제공자 선택
    if (message.includes('창의적') || message.includes('creative')) {
      return 'anthropic';
    }
    return 'openai'; // 기본값
  }
});

// 라우터를 제공자로 사용
const robota = new Robota({ provider: router });

// 각 질문은 적절한 제공자로 라우팅됨
const creativeResult = await robota.run('창의적인 시를 써줘');  // Anthropic으로 라우팅
const factualResult = await robota.run('파이의 값은 얼마인가요?');  // OpenAI로 라우팅
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"ai-제공자-providers","children":["$","a",null,{"href":"#ai-제공자-providers","children":"AI 제공자 (Providers)"}]}],"\n",["$","p",null,{"children":"Robota는 다양한 AI 제공자를 지원하여 여러 LLM 서비스를 활용할 수 있게 합니다. 각 제공자는 특정 API와 통신하고 해당 서비스의 고유한 기능을 활용할 수 있도록 설계되었습니다."}],"\n",["$","h2",null,{"id":"지원되는-제공자","children":["$","a",null,{"href":"#지원되는-제공자","children":"지원되는 제공자"}]}],"\n",["$","h3",null,{"id":"현재-구현됨","children":["$","a",null,{"href":"#현재-구현됨","children":"현재 구현됨"}]}],"\n",["$","h4",null,{"id":"openai","children":["$","a",null,{"href":"#openai","children":"OpenAI"}]}],"\n",["$","p",null,{"children":"OpenAI의 GPT 모델과 통합하기 위한 제공자입니다. GPT-3.5, GPT-4 등 다양한 모델을 지원합니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"providers/openai","children":"OpenAI 제공자 문서"}],"를 참조하세요."]}],"\n",["$","h4",null,{"id":"anthropic","children":["$","a",null,{"href":"#anthropic","children":"Anthropic"}]}],"\n",["$","p",null,{"children":"Anthropic의 Claude 모델과 통합하기 위한 제공자입니다. Claude, Claude Instant 등의 모델을 지원합니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"providers/anthropic","children":"Anthropic 제공자 문서"}],"를 참조하세요."]}],"\n",["$","h4",null,{"id":"replicate","children":["$","a",null,{"href":"#replicate","children":"Replicate"}]}],"\n",["$","p",null,{"children":"Replicate 플랫폼의 다양한 오픈소스 모델을 활용할 수 있는 제공자입니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"providers/replicate","children":"Replicate 제공자 문서"}],"를 참조하세요."]}],"\n",["$","h4",null,{"id":"langchain","children":["$","a",null,{"href":"#langchain","children":"LangChain"}]}],"\n",["$","p",null,{"children":"LangChain 프레임워크와 통합하기 위한 제공자로, 다양한 LangChain 모델과 체인을 Robota에서 활용할 수 있습니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"providers/langchain","children":"LangChain 제공자 문서"}],"를 참조하세요."]}],"\n",["$","h3",null,{"id":"프로토콜-제공자","children":["$","a",null,{"href":"#프로토콜-제공자","children":"프로토콜 제공자"}]}],"\n",["$","p",null,{"children":"특정 프로토콜을 기반으로 한 제공자도 지원합니다:"}],"\n",["$","h4",null,{"id":"mcp-model-context-protocol","children":["$","a",null,{"href":"#mcp-model-context-protocol","children":"MCP (Model Context Protocol)"}]}],"\n",["$","p",null,{"children":"Model Context Protocol을 지원하는 모델과 통합하기 위한 제공자입니다. MCP 클라이언트 주입 방식과 OpenAPI 스키마 방식을 모두 지원합니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"protocols/mcp-provider","children":"MCP 제공자 문서"}],"와 ",["$","a",null,{"href":"protocols/model-context-protocol","children":"모델 컨텍스트 프로토콜"}],"을 참조하세요."]}],"\n",["$","h3",null,{"id":"커스텀-제공자","children":["$","a",null,{"href":"#커스텀-제공자","children":"커스텀 제공자"}]}],"\n",["$","p",null,{"children":"자체 AI 서비스나 지원되지 않는 서비스를 통합하기 위한 커스텀 제공자를 직접 구현할 수 있습니다."}],"\n",["$","p",null,{"children":["자세한 내용은 ",["$","a",null,{"href":"providers/custom","children":"커스텀 제공자 가이드"}],"를 참조하세요."]}],"\n",["$","h2",null,{"id":"제공자-사용하기","children":["$","a",null,{"href":"#제공자-사용하기","children":"제공자 사용하기"}]}],"\n",["$","p",null,{"children":"각 제공자는 일관된 인터페이스를 통해 사용됩니다. API 클라이언트를 직접 주입해야 합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAIProvider } from 'robota';\nimport OpenAI from 'openai';\n\n// OpenAI 클라이언트 생성\nconst openaiClient = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  organization: process.env.OPENAI_ORGANIZATION\n});\n\n// OpenAI 제공자 설정 (클라이언트 인스턴스 주입은 필수)\nconst provider = new OpenAIProvider({\n  model: 'gpt-4',\n  temperature: 0.7,\n  client: openaiClient\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요! 오늘 날씨가 어때요?');\n"}]}],"\n",["$","h3",null,{"id":"클라이언트-인스턴스-주입-필수","children":["$","a",null,{"href":"#클라이언트-인스턴스-주입-필수","children":"클라이언트 인스턴스 주입 (필수)"}]}],"\n",["$","p",null,{"children":"Robota는 외부에서 생성된 API 클라이언트를 사용합니다. 이를 통해:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"애플리케이션 전체에서 일관된 클라이언트 설정 유지"}],"\n",["$","li",null,{"children":"테스트 및 모킹 용이성 향상"}],"\n",["$","li",null,{"children":"클라이언트 설정에 대한 더 세밀한 제어 가능"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, AnthropicProvider } from 'robota';\nimport Anthropic from '@anthropic-ai/sdk';\n\n// Anthropic 클라이언트 생성\nconst anthropicClient = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY\n});\n\n// Anthropic 제공자 설정 (클라이언트 주입은 필수)\nconst provider = new AnthropicProvider({\n  model: 'claude-3-opus',\n  temperature: 0.7,\n  client: anthropicClient\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n"}]}],"\n",["$","h3",null,{"id":"mcp-클라이언트-사용하기","children":["$","a",null,{"href":"#mcp-클라이언트-사용하기","children":"MCP 클라이언트 사용하기"}]}],"\n",["$","p",null,{"children":"Model Context Protocol을 지원하는 모델을 사용하려면:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, MCPProvider } from 'robota';\nimport { Client, StdioClientTransport } from '@modelcontextprotocol/sdk';\n\n// MCP 클라이언트 생성\nconst transport = new StdioClientTransport(/* 설정 */);\nconst mcpClient = new Client(transport);\n\n// MCP 제공자 초기화\nconst provider = new MCPProvider({\n  type: 'client', // 클라이언트 방식\n  client: mcpClient,\n  model: 'model-name'\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요!');\n"}]}],"\n",["$","h2",null,{"id":"여러-제공자-사용하기","children":["$","a",null,{"href":"#여러-제공자-사용하기","children":"여러 제공자 사용하기"}]}],"\n",["$","p",null,{"children":"여러 제공자를 동시에 사용하여 다양한 AI 모델의 장점을 활용할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"$a"}]}],"\n",["$","h2",null,{"id":"제공자-구성-옵션","children":["$","a",null,{"href":"#제공자-구성-옵션","children":"제공자 구성 옵션"}]}],"\n",["$","p",null,{"children":"각 제공자는 서비스별 고유 구성 옵션을 지원합니다. 공통적으로 지원되는 기본 옵션은 다음과 같습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface ProviderOptions {\n  model: string;       // 사용할 모델 이름\n  temperature?: number; // 응답의 무작위성/창의성 (0~1)\n  maxTokens?: number;   // 최대 생성 토큰 수\n  stopSequences?: string[]; // 생성 중지 시퀀스\n  streamMode?: boolean; // 스트리밍 모드 활성화 여부\n  functionCallMode?: 'auto' | 'disabled' | 'force'; // 함수 호출 모드\n  forcedFunction?: string; // 강제 실행할 함수 이름 (functionCallMode가 'force'인 경우)\n  forcedArguments?: Record<string, any>; // 강제 함수 인자 (functionCallMode가 'force'인 경우)\n}\n"}]}],"\n",["$","h2",null,{"id":"자세한-제공자별-문서","children":["$","a",null,{"href":"#자세한-제공자별-문서","children":"자세한 제공자별 문서"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"providers/openai","children":"OpenAI 제공자"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"providers/anthropic","children":"Anthropic 제공자"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"providers/replicate","children":"Replicate 제공자"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"providers/langchain","children":"LangChain 제공자"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"protocols/mcp-provider","children":"MCP 제공자"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"providers/custom","children":"커스텀 제공자 만들기"}]}],"\n"]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"providers - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
