3:I[6601,[],""]
5:I[7078,[],""]
6:I[7065,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
7:I[7306,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
8:I[4561,["558","static/chunks/558-671780cd7fdea0cf.js","931","static/chunks/app/page-6deb6f2212da67a6.js"],""]
4:["slug","providers/custom","c"]
0:["NDNDpjy0SHJQJtd58PhEm",[[["",{"children":["docs",{"children":[["slug","providers/custom","c"],{"children":["__PAGE__?{\"slug\":[\"providers\",\"custom\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","providers/custom","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}]],null]]},[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[],"styles":null}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
a:Tc47,import { BaseProvider, ProviderResponse, ProviderOptions, ModelContext } from 'robota';

interface CustomProviderOptions extends ProviderOptions {
  model: string;
  client: any; // 커스텀 API 클라이언트 타입
  // 추가 옵션
}

export class CustomProvider extends BaseProvider {
  private client: any;
  
  constructor(options: CustomProviderOptions) {
    super(options);
    
    if (!options.client) {
      throw new Error('클라이언트 인스턴스가 필요합니다.');
    }
    
    this.client = options.client;
  }

  async generateCompletion(
    context: ModelContext, 
    options?: Partial<ProviderOptions>
  ): Promise<ProviderResponse> {
    // 컨텍스트와 메시지를 API가 이해할 수 있는 형식으로 변환
    const messages = this.formatMessages(context.messages);
    
    // API 호출 구현
    const response = await this.client.generateCompletion({
      messages,
      model: options?.model || this.options.model,
      temperature: options?.temperature || this.options.temperature,
      // 추가 파라미터
    });
    
    // API 응답을 표준 형식으로 변환
    return {
      content: response.text,
      usage: {
        promptTokens: response.usage?.prompt_tokens || 0,
        completionTokens: response.usage?.completion_tokens || 0,
        totalTokens: response.usage?.total_tokens || 0
      }
    };
  }

  async generateCompletionStream(
    context: ModelContext, 
    options?: Partial<ProviderOptions>
  ): Promise<ProviderResponseStream> {
    // 스트리밍 API 호출 구현
    const stream = await this.client.generateCompletionStream({
      messages: this.formatMessages(context.messages),
      model: options?.model || this.options.model,
      // 추가 파라미터
    });
    
    // 스트림 처리 및 변환
    return this.processStream(stream);
  }
  
  // 도우미 메서드: 메시지 형식 변환
  private formatMessages(messages: any[]) {
    // Robota 메시지 형식을 API 형식으로 변환
    return messages.map(msg => {
      // 변환 로직
      return {
        role: msg.role,
        content: msg.content
        // 추가 변환
      };
    });
  }
  
  // 도우미 메서드: 스트림 처리
  private async *processStream(apiStream: any): AsyncGenerator<ProviderResponse> {
    for await (const chunk of apiStream) {
      yield {
        content: chunk.text || '',
        // 추가 데이터
      };
    }
  }

  // 함수 호출 스키마 변환 (옵션)
  transformFunctionSchemas(functions: any[]): any {
    // 함수 스키마를 API가 이해할 수 있는 형식으로 변환
    return functions.map(fn => {
      // 변환 로직
      return {
        name: fn.name,
        description: fn.description,
        parameters: fn.parameters
        // 추가 변환
      };
    });
  }

  // 기능 지원 여부 확인
  supportsFeature(feature: string): boolean {
    switch (feature) {
      case 'function-calling':
        return true; // 함수 호출 지원 여부
      case 'streaming':
        return true; // 스트리밍 지원 여부
      default:
        return false;
    }
  }
}
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"커스텀-제공자-만들기","children":["$","a",null,{"href":"#커스텀-제공자-만들기","children":"커스텀 제공자 만들기"}]}],"\n",["$","p",null,{"children":"자체 AI 서비스나 지원되지 않는 서비스를 통합하려면 커스텀 제공자를 만들 수 있습니다. Robota는\n유연한 추상화 계층을 제공하여 다양한 AI 모델과 서비스를 쉽게 통합할 수 있게 합니다."}],"\n",["$","h2",null,{"id":"기본-구현-방법","children":["$","a",null,{"href":"#기본-구현-방법","children":"기본 구현 방법"}]}],"\n",["$","p",null,{"children":["커스텀 제공자를 만들기 위해서는 ",["$","code",null,{"children":"BaseProvider"}]," 클래스를 확장하고 필요한 메서드를 구현해야 합니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"$a"}]}],"\n",["$","h2",null,{"id":"사용-예시","children":["$","a",null,{"href":"#사용-예시","children":"사용 예시"}]}],"\n",["$","p",null,{"children":"커스텀 제공자를 만든 후 Robota에서 사용하는 방법:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota } from 'robota';\nimport { CustomProvider } from './custom-provider';\nimport { CustomClient } from 'custom-client-library';\n\n// 커스텀 클라이언트 생성\nconst client = new CustomClient({\n  apiKey: process.env.CUSTOM_API_KEY,\n  // 추가 설정\n});\n\n// 커스텀 제공자 초기화\nconst provider = new CustomProvider({\n  model: 'custom-model-v1',\n  temperature: 0.7,\n  client: client\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요! 커스텀 모델을 테스트합니다.');\nconsole.log(result);\n"}]}],"\n",["$","h2",null,{"id":"추가-고려사항","children":["$","a",null,{"href":"#추가-고려사항","children":"추가 고려사항"}]}],"\n",["$","h3",null,{"id":"1-에러-처리","children":["$","a",null,{"href":"#1-에러-처리","children":"1. 에러 처리"}]}],"\n",["$","p",null,{"children":"견고한 에러 처리를 구현하여 API 오류를 적절히 처리해야 합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"async generateCompletion(context, options) {\n  try {\n    // API 호출...\n  } catch (error) {\n    if (error.statusCode === 429) {\n      throw new Error('API 속도 제한에 도달했습니다. 잠시 후 다시 시도하세요.');\n    } else if (error.statusCode === 401) {\n      throw new Error('인증에 실패했습니다. API 키를 확인하세요.');\n    } else {\n      throw new Error(`API 호출 중 오류 발생: ${error.message}`);\n    }\n  }\n}\n"}]}],"\n",["$","h3",null,{"id":"2-함수-호출-지원","children":["$","a",null,{"href":"#2-함수-호출-지원","children":"2. 함수 호출 지원"}]}],"\n",["$","p",null,{"children":"함수 호출을 지원하려면 적절한 변환 로직을 구현해야 합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// API가 함수 호출을 지원하는 경우 \nasync generateCompletion(context, options) {\n  // ... 메시지 준비 등의 코드\n  \n  // 함수 스키마 추가\n  if (context.functions && context.functions.length > 0) {\n    apiRequest.functions = this.transformFunctionSchemas(context.functions);\n    apiRequest.function_call = options?.functionCallMode || this.options.functionCallMode;\n  }\n  \n  // API 호출 및 응답\n  // ...\n  \n  // 함수 호출 처리\n  if (apiResponse.function_call) {\n    return {\n      content: apiResponse.content,\n      functionCall: {\n        name: apiResponse.function_call.name,\n        arguments: JSON.parse(apiResponse.function_call.arguments)\n      },\n      // ... 기타 응답 필드\n    };\n  }\n  \n  return { content: apiResponse.content };\n}\n"}]}],"\n",["$","h3",null,{"id":"3-스트리밍-응답-처리","children":["$","a",null,{"href":"#3-스트리밍-응답-처리","children":"3. 스트리밍 응답 처리"}]}],"\n",["$","p",null,{"children":"스트리밍 응답을 처리하는 방법은 API마다 다를 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"private async *processStream(apiStream) {\n  let aggregatedContent = '';\n  \n  try {\n    for await (const chunk of apiStream) {\n      const content = chunk.text || chunk.choices?.[0]?.delta?.content || '';\n      aggregatedContent += content;\n      \n      yield {\n        content,\n        aggregatedContent,\n        // 추가 메타데이터\n      };\n    }\n  } catch (error) {\n    throw new Error(`스트리밍 처리 중 오류 발생: ${error.message}`);\n  }\n}\n"}]}],"\n",["$","h2",null,{"id":"테스트-및-디버깅","children":["$","a",null,{"href":"#테스트-및-디버깅","children":"테스트 및 디버깅"}]}],"\n",["$","p",null,{"children":"커스텀 제공자를 테스트하고 디버깅하기 위한 조언:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"단위 테스트"}],": 주요 메서드에 대한 단위 테스트를 작성하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"목(Mock) 사용"}],": API 호출을 시뮬레이션하는 목 객체를 사용하여 테스트하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"점진적 개발"}],": 기본 기능부터 시작하여 점진적으로 고급 기능을 추가하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"로깅"}],": 개발 중에는 상세한 로깅을 활성화하여 문제를 파악하세요."]}],"\n"]}],"\n",["$","h2",null,{"id":"모범-사례","children":["$","a",null,{"href":"#모범-사례","children":"모범 사례"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"타입 안전성"}],": TypeScript 타입을 최대한 활용하여 타입 안전성을 보장하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"에러 처리"}],": 모든 가능한 오류 상황을 처리하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"설정 유효성 검사"}],": 생성자에서 모든 필수 옵션의 유효성을 검사하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"문서화"}],": 코드에 JSDoc 주석을 추가하여 문서화하세요."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"캐싱 고려"}],": 적절한 경우 API 응답을 캐싱하여 비용을 절감하세요."]}],"\n"]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"custom - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
