3:I[8822,[],""]
5:I[7424,[],""]
6:I[9373,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
7:I[6519,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
8:I[4575,["696","static/chunks/696-d43650737205c45a.js","931","static/chunks/app/page-718fde6e5e1a891e.js"],""]
4:["slug","system-messages","c"]
0:["p9dByJqKFaAPerrYWIRk_",[[["",{"children":["docs",{"children":[["slug","system-messages","c"],{"children":["__PAGE__?{\"slug\":[\"system-messages\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","system-messages","c"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]}]]}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$L9",null]]]]
a:T5c3,import { Robota, OpenAIProvider, createFunction } from 'robota';
import OpenAI from 'openai';
import { z } from 'zod';

// OpenAI 클라이언트 생성
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// 함수 정의
const getWeather = createFunction({
  name: 'getWeather',
  description: '특정 위치의 현재 날씨 정보를 가져옵니다',
  parameters: z.object({
    location: z.string().describe('날씨를 확인할 도시 이름 (예: 서울, 부산)'),
    unit: z.enum(['celsius', 'fahrenheit']).optional().describe('온도 단위')
  }),
  execute: async (params) => {
    console.log(`날씨 검색: ${params.location}`);
    
    // 실제 API 호출 대신 가상 데이터 반환
    return {
      location: params.location,
      temperature: 23,
      condition: '맑음',
      humidity: 60,
      unit: params.unit || 'celsius'
    };
  }
});

// Robota 인스턴스 생성
const robota = new Robota({
  provider: new OpenAIProvider({
    model: 'gpt-4',
    client
  }),
  systemMessages: [
    { role: 'system', content: '당신은 날씨에 대한 전문가입니다.' },
    { role: 'system', content: '항상 정확한 정보를 제공하려고 노력하세요.' }
  ],
  functionCallConfig: {
    defaultMode: 'auto',
    allowedFunctions: ['getWeather']
  }
});

// 함수 등록
robota.registerFunctions({ getWeather });

// 실행
const result = await robota.run('서울의 날씨가 어때?');
console.log(result);
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"시스템-메시지와-함수-호출-모드","children":["$","a",null,{"href":"#시스템-메시지와-함수-호출-모드","children":"시스템 메시지와 함수 호출 모드"}]}],"\n",["$","p",null,{"children":"이 문서에서는 Robota에서 시스템 메시지를 관리하고 함수 호출 모드를 제어하는 방법에 대해 설명합니다."}],"\n",["$","h2",null,{"id":"시스템-메시지-관리","children":["$","a",null,{"href":"#시스템-메시지-관리","children":"시스템 메시지 관리"}]}],"\n",["$","p",null,{"children":"Robota는 시스템 메시지를 다양한 방식으로 관리할 수 있는 기능을 제공합니다. 시스템 메시지는 AI 모델에게 특정 역할이나 행동 지침을 제공하는 데 사용됩니다."}],"\n",["$","h3",null,{"id":"단일-시스템-프롬프트","children":["$","a",null,{"href":"#단일-시스템-프롬프트","children":"단일 시스템 프롬프트"}]}],"\n",["$","p",null,{"children":"가장 간단한 방법은 단일 시스템 프롬프트를 사용하는 것입니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 초기화 시 설정\nconst robota = new Robota({\n  provider: openaiProvider,\n  systemPrompt: '당신은 도움이 되는 AI 어시스턴트입니다.'\n});\n\n// 나중에 변경\nrobota.setSystemPrompt('당신은 날씨 정보를 제공하는 AI 비서입니다.');\n"}]}],"\n",["$","h3",null,{"id":"여러-시스템-메시지","children":["$","a",null,{"href":"#여러-시스템-메시지","children":"여러 시스템 메시지"}]}],"\n",["$","p",null,{"children":"더 복잡한 지시사항을 위해 여러 시스템 메시지를 설정할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 초기화 시 설정\nconst robota = new Robota({\n  provider: openaiProvider,\n  systemMessages: [\n    { role: 'system', content: '당신은 날씨에 대한 전문가입니다.' },\n    { role: 'system', content: '항상 정확한 정보를 제공하려고 노력하세요.' },\n    { role: 'system', content: '사용자가 어디에 있는지 물어보는 것이 좋습니다.' }\n  ]\n});\n\n// 나중에 설정\nrobota.setSystemMessages([\n  { role: 'system', content: '당신은 전문 요리사입니다.' },\n  { role: 'system', content: '사용자에게 요리 레시피를 가르쳐 주세요.' }\n]);\n"}]}],"\n",["$","h3",null,{"id":"시스템-메시지-추가","children":["$","a",null,{"href":"#시스템-메시지-추가","children":"시스템 메시지 추가"}]}],"\n",["$","p",null,{"children":"기존 시스템 메시지에 새 메시지를 추가할 수도 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 단일 시스템 프롬프트로 시작\nconst robota = new Robota({\n  provider: openaiProvider,\n  systemPrompt: '당신은 도움이 되는 AI 어시스턴트입니다.'\n});\n\n// 추가 시스템 메시지 추가\nrobota.addSystemMessage('사용자에게 항상 공손하게 대응하세요.');\nrobota.addSystemMessage('가능하면 간결하게 답변하세요.');\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-모드","children":["$","a",null,{"href":"#함수-호출-모드","children":"함수 호출 모드"}]}],"\n",["$","p",null,{"children":["Robota는 세 가지 함수 호출 모드를 지원합니다: ",["$","code",null,{"children":"auto"}],", ",["$","code",null,{"children":"disabled"}],", ",["$","code",null,{"children":"force"}],". 이 모드는 AI 모델이 함수를 호출하는 방식을 제어합니다."]}],"\n",["$","h3",null,{"id":"자동-모드-기본값","children":["$","a",null,{"href":"#자동-모드-기본값","children":"자동 모드 (기본값)"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"auto"}]," 모드에서 AI는 대화 맥락에 따라 필요할 때 함수를 자동으로 호출합니다:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 전역 설정\nrobota.setFunctionCallMode('auto');\n\n// 또는 개별 호출에서 설정\nconst result = await robota.run('서울의 날씨가 어때?', {\n  functionCallMode: 'auto' // 기본값이므로 생략 가능\n});\n"}]}],"\n",["$","h3",null,{"id":"비활성화-모드","children":["$","a",null,{"href":"#비활성화-모드","children":"비활성화 모드"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"disabled"}]," 모드에서는 함수 호출이 완전히 비활성화됩니다:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 전역 설정\nrobota.setFunctionCallMode('disabled');\n\n// 또는 개별 호출에서 설정\nconst result = await robota.run('서울의 날씨가 어때?', {\n  functionCallMode: 'disabled'\n});\n"}]}],"\n",["$","h3",null,{"id":"강제-모드","children":["$","a",null,{"href":"#강제-모드","children":"강제 모드"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"force"}]," 모드에서는 AI에게 특정 함수를 강제로 호출하도록 지시합니다:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 전역 설정\nrobota.setFunctionCallMode('force');\n\n// 개별 호출에서 함수와 인자 지정\nconst result = await robota.run('서울의 날씨가 어때?', {\n  functionCallMode: 'force',\n  forcedFunction: 'getWeather',\n  forcedArguments: { location: '서울' }\n});\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-설정-관리","children":["$","a",null,{"href":"#함수-호출-설정-관리","children":"함수 호출 설정 관리"}]}],"\n",["$","p",null,{"children":"전역 함수 호출 설정을 관리할 수도 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 초기화 시 설정\nconst robota = new Robota({\n  provider: openaiProvider,\n  functionCallConfig: {\n    defaultMode: 'auto', // 기본 모드\n    maxCalls: 5, // 최대 함수 호출 횟수\n    timeout: 10000, // 함수 호출 타임아웃 (ms)\n    allowedFunctions: ['getWeather'] // 허용된 함수 목록\n  }\n});\n\n// 나중에 설정 변경\nrobota.configureFunctionCall({\n  mode: 'auto',\n  maxCalls: 10,\n  timeout: 15000,\n  allowedFunctions: ['getWeather', 'searchDatabase']\n});\n"}]}],"\n",["$","h2",null,{"id":"전체-예제","children":["$","a",null,{"href":"#전체-예제","children":"전체 예제"}]}],"\n",["$","p",null,{"children":"다음은 시스템 메시지와 함수 호출 모드를 함께 사용하는 전체 예제입니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"$a"}]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"system messages - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
