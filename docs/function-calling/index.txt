3:I[6601,[],""]
5:I[7078,[],""]
6:I[7065,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
7:I[7306,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
8:I[4561,["558","static/chunks/558-671780cd7fdea0cf.js","931","static/chunks/app/page-6deb6f2212da67a6.js"],""]
4:["slug","function-calling","c"]
0:["wcrKsXbGPFxyQ08igfAuE",[[["",{"children":["docs",{"children":[["slug","function-calling","c"],{"children":["__PAGE__?{\"slug\":[\"function-calling\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","function-calling","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}]],null]]},[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[],"styles":null}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
a:T4e8,import { Robota } from '@robota/core';
import { OpenAIProvider } from '@robota/provider-openai';
import OpenAI from 'openai';

// OpenAI 클라이언트 생성
const openaiClient = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Robota 인스턴스 생성
const robota = new Robota({
  provider: new OpenAIProvider({
    model: 'gpt-4',
    client: openaiClient
  })
});

// 함수 정의
const functions = {
  // 날씨 검색 함수
  getWeather: async (location: string, unit: 'celsius' | 'fahrenheit' = 'celsius') => {
    console.log(`${location}의 날씨를 ${unit} 단위로 검색 중...`);
    // 실제 구현에서는 날씨 API 호출
    return { 
      temperature: 25, 
      condition: '맑음', 
      humidity: 60,
      unit
    };
  },
  
  // 수학 계산 함수
  calculate: async (expression: string) => {
    console.log(`계산 중: ${expression}`);
    // 주의: eval은 보안상 위험할 수 있습니다. 실제 사용시 안전한 대안을 고려하세요.
    return { result: eval(expression) };
  }
};

// 함수 등록
robota.registerFunctions(functions);

// 실행
const result = await robota.run('서울의 날씨가 어떤지 알려주고, 25 + 15의 계산 결과도 보여줘.');
console.log(result);
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"함수-호출-function-calling","children":["$","a",null,{"href":"#함수-호출-function-calling","children":"함수 호출 (Function Calling)"}]}],"\n",["$","p",null,{"children":"함수 호출은 AI 모델이 사전 정의된 함수를 호출할 수 있게 하는 기능입니다. 이를 통해 AI는 외부 시스템과 상호작용하고, 데이터를 검색하거나 계산을 수행할 수 있습니다."}],"\n",["$","h2",null,{"id":"기본적인-함수-호출","children":["$","a",null,{"href":"#기본적인-함수-호출","children":"기본적인 함수 호출"}]}],"\n",["$","p",null,{"children":"Robota에서 함수를 정의하고 등록하는 방법은 다음과 같습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"$a"}]}],"\n",["$","h2",null,{"id":"함수-스키마-자동-추출","children":["$","a",null,{"href":"#함수-스키마-자동-추출","children":"함수 스키마 자동 추출"}]}],"\n",["$","p",null,{"children":"Robota는 타입스크립트의 타입 정보를 사용하여 함수의 매개변수와 반환 타입에 대한 스키마를 자동으로 생성합니다. 이렇게 생성된 스키마는 AI 모델에게 함수의 사용법을 알려주는 데 사용됩니다."}],"\n",["$","h2",null,{"id":"복잡한-매개변수를-가진-함수","children":["$","a",null,{"href":"#복잡한-매개변수를-가진-함수","children":"복잡한 매개변수를 가진 함수"}]}],"\n",["$","p",null,{"children":"객체나 배열과 같은 복잡한 매개변수를 가진 함수도 정의할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 복잡한 매개변수를 가진 함수\nconst functions = {\n  createUser: async (userData: {\n    name: string;\n    email: string;\n    age: number;\n    preferences?: {\n      theme: 'light' | 'dark';\n      notifications: boolean;\n    }\n  }) => {\n    console.log(`사용자 생성 중: ${userData.name}`);\n    return { \n      id: 'user-123',\n      createdAt: new Date().toISOString(),\n      ...userData\n    };\n  }\n};\n\nrobota.registerFunctions(functions);\n"}]}],"\n",["$","h2",null,{"id":"zod를-사용한-스키마-검증","children":["$","a",null,{"href":"#zod를-사용한-스키마-검증","children":"zod를 사용한 스키마 검증"}]}],"\n",["$","p",null,{"children":["보다 강력한 매개변수 검증을 위해 ",["$","code",null,{"children":"zod"}]," 라이브러리를 사용할 수 있습니다:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { z } from 'zod';\nimport { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/provider-openai';\nimport { createFunction } from '@robota/core';\n\n// zod 스키마를 사용한 함수 생성\nconst sendEmail = createFunction({\n  name: 'sendEmail',\n  description: '지정된 수신자에게 이메일을 보냅니다',\n  parameters: z.object({\n    to: z.string().email('유효한 이메일 주소가 필요합니다'),\n    subject: z.string().min(1, '제목은 비어있을 수 없습니다'),\n    body: z.string(),\n    cc: z.array(z.string().email()).optional(),\n    bcc: z.array(z.string().email()).optional(),\n    attachments: z.array(z.string().url()).optional()\n  }),\n  execute: async (params) => {\n    console.log(`이메일 전송 중: ${params.subject}`);\n    // 실제 이메일 전송 로직\n    return { \n      status: 'sent',\n      messageId: 'msg-' + Math.random().toString(36).substring(2, 9)\n    };\n  }\n});\n\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n\n// 함수 등록\nrobota.registerFunctions({ sendEmail });\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-모드","children":["$","a",null,{"href":"#함수-호출-모드","children":"함수 호출 모드"}]}],"\n",["$","p",null,{"children":"Robota는 다양한 함수 호출 모드를 지원합니다:"}],"\n",["$","h3",null,{"id":"자동-모드-기본값","children":["$","a",null,{"href":"#자동-모드-기본값","children":"자동 모드 (기본값)"}]}],"\n",["$","p",null,{"children":"AI가 필요에 따라 함수를 자동으로 호출합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 개별 호출에서 설정\nconst result = await robota.run('내일 서울의 날씨가 어떤지 알려줘', {\n  functionCallMode: 'auto' // 기본값이므로 생략 가능\n});\n\n// 전역 설정\nrobota.setFunctionCallMode('auto');\n"}]}],"\n",["$","h3",null,{"id":"강제-모드","children":["$","a",null,{"href":"#강제-모드","children":"강제 모드"}]}],"\n",["$","p",null,{"children":"특정 함수를 강제로 호출하도록 지시합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 개별 호출에서 설정\nconst result = await robota.run('내일 서울의 날씨가 어떤지 알려줘', {\n  functionCallMode: 'force',\n  forcedFunction: 'getWeather',\n  forcedArguments: { location: '서울', unit: 'celsius' }\n});\n\n// 전역 설정 + 개별 호출에서 함수 지정\nrobota.setFunctionCallMode('force');\nconst result = await robota.run('아무 내용', {\n  forcedFunction: 'getWeather',\n  forcedArguments: { location: '서울' }\n});\n"}]}],"\n",["$","h3",null,{"id":"비활성화-모드","children":["$","a",null,{"href":"#비활성화-모드","children":"비활성화 모드"}]}],"\n",["$","p",null,{"children":"함수 호출을 완전히 비활성화합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 개별 호출에서 설정\nconst result = await robota.run('안녕하세요!', {\n  functionCallMode: 'disabled'\n});\n\n// 전역 설정\nrobota.setFunctionCallMode('disabled');\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-추적-및-로깅","children":["$","a",null,{"href":"#함수-호출-추적-및-로깅","children":"함수 호출 추적 및 로깅"}]}],"\n",["$","p",null,{"children":"함수 호출을 추적하고 로깅할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/provider-openai';\n\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    model: 'gpt-4',\n    client: openaiClient\n  }),\n  onFunctionCall: (functionName, args, result) => {\n    console.log(`함수 호출: ${functionName}`);\n    console.log('인자:', args);\n    console.log('결과:', result);\n  }\n});\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-설정-관리","children":["$","a",null,{"href":"#함수-호출-설정-관리","children":"함수 호출 설정 관리"}]}],"\n",["$","p",null,{"children":"보안과 안전성을 위해 함수 호출에 전역 설정을 적용할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota } from '@robota/core';\nimport { OpenAIProvider } from '@robota/provider-openai';\n\n// 초기화 시 설정\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    model: 'gpt-4',\n    client: openaiClient\n  }),\n  functionCallConfig: {\n    maxCalls: 5, // 최대 함수 호출 횟수\n    timeout: 10000, // 함수 호출 타임아웃 (ms)\n    allowedFunctions: ['getWeather', 'calculate'], // 허용된 함수 목록\n    defaultMode: 'auto' // 기본 함수 호출 모드\n  }\n});\n\n// 나중에 설정 변경\nrobota.configureFunctionCall({\n  mode: 'auto',\n  maxCalls: 10,\n  timeout: 15000,\n  allowedFunctions: ['getWeather', 'calculate', 'searchDatabase']\n});\n"}]}],"\n",["$","p",null,{"children":"함수 호출 모드만 변경할 수도 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"robota.setFunctionCallMode('auto'); // 'auto', 'disabled', 'force' 중 하나 선택\n"}]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"function calling - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
