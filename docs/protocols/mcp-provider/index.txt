3:I[6601,[],""]
5:I[7078,[],""]
6:I[7065,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
7:I[7306,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
8:I[4561,["558","static/chunks/558-671780cd7fdea0cf.js","931","static/chunks/app/page-6deb6f2212da67a6.js"],""]
4:["slug","protocols/mcp-provider","c"]
0:["JChVyDCviMMI0A7FIj0PM",[[["",{"children":["docs",{"children":[["slug","protocols/mcp-provider","c"],{"children":["__PAGE__?{\"slug\":[\"protocols\",\"mcp-provider\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","protocols/mcp-provider","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}]],null]]},[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[],"styles":null}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"mcp-제공자-model-context-protocol","children":["$","a",null,{"href":"#mcp-제공자-model-context-protocol","children":"MCP 제공자 (Model Context Protocol)"}]}],"\n",["$","p",null,{"children":"MCP(Model Context Protocol) 제공자는 Model Context Protocol을 지원하는 다양한 AI 모델과 통합할 수 있도록 해줍니다. MCP는 AI 모델과의 상호작용을 위한 표준화된 프로토콜입니다."}],"\n",["$","h2",null,{"id":"특징","children":["$","a",null,{"href":"#특징","children":"특징"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Model Context Protocol을 지원하는 모든 모델과 호환"}],"\n",["$","li",null,{"children":"두 가지 통합 방식 지원: 직접 MCP 클라이언트 주입 또는 OpenAPI 스키마 기반 통합"}],"\n",["$","li",null,{"children":"함수 호출(Function Calling) 지원"}],"\n",["$","li",null,{"children":"스트리밍 응답 지원"}],"\n"]}],"\n",["$","h2",null,{"id":"설치","children":["$","a",null,{"href":"#설치","children":"설치"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"npm install @robota/mcp\n"}]}],"\n",["$","h2",null,{"id":"사용법","children":["$","a",null,{"href":"#사용법","children":"사용법"}]}],"\n",["$","h3",null,{"id":"클라이언트-주입-방식","children":["$","a",null,{"href":"#클라이언트-주입-방식","children":"클라이언트 주입 방식"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"@modelcontextprotocol/sdk"}]," 라이브러리를 사용하여 MCP 클라이언트를 생성하고 이를 제공자에 주입하는 방식입니다."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, MCPProvider } from 'robota';\nimport { Client, StdioClientTransport } from '@modelcontextprotocol/sdk';\n\n// MCP 클라이언트 생성\nconst transport = new StdioClientTransport(/* 설정 */);\nconst mcpClient = new Client(transport);\n\n// MCP 제공자 초기화\nconst provider = new MCPProvider({\n  type: 'client',\n  client: mcpClient,\n  model: 'model-name', // 사용할 모델 이름\n  temperature: 0.7\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요! 오늘 날씨가 어때요?');\n"}]}],"\n",["$","h3",null,{"id":"openapi-스키마-방식","children":["$","a",null,{"href":"#openapi-스키마-방식","children":"OpenAPI 스키마 방식"}]}],"\n",["$","p",null,{"children":"OpenAPI 3.0 스키마를 사용하여 MCP API와 통합하는 방식입니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, MCPProvider } from 'robota';\n\n// OpenAPI 스키마 방식으로 MCP 제공자 초기화\nconst provider = new MCPProvider({\n  type: 'openapi',\n  schema: 'https://example.com/mcp-api/openapi.json', // 또는 스키마 객체\n  baseURL: 'https://api.example.com/v1',\n  headers: {\n    'Authorization': `Bearer ${process.env.MCP_API_KEY}`\n  },\n  model: 'model-name', // 사용할 모델 이름\n  temperature: 0.7\n});\n\n// Robota 인스턴스에 제공자 연결\nconst robota = new Robota({ provider });\n\n// 실행\nconst result = await robota.run('안녕하세요! 함수 호출 테스트입니다.');\n"}]}],"\n",["$","h2",null,{"id":"함수-호출-예제","children":["$","a",null,{"href":"#함수-호출-예제","children":"함수 호출 예제"}]}],"\n",["$","p",null,{"children":"MCP 제공자에서 함수 호출을 사용하는 예제입니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, MCPProvider } from 'robota';\nimport { Client, StdioClientTransport } from '@modelcontextprotocol/sdk';\n\n// MCP 클라이언트 생성\nconst transport = new StdioClientTransport(/* 설정 */);\nconst mcpClient = new Client(transport);\n\n// MCP 제공자 초기화\nconst provider = new MCPProvider({\n  type: 'client',\n  client: mcpClient,\n  model: 'model-name'\n});\n\n// Robota 인스턴스 생성\nconst robota = new Robota({ provider });\n\n// 함수 등록\nrobota.registerFunctions({\n  getWeather: async (location: string) => {\n    // 날씨 정보 조회 로직\n    return { temperature: 22, condition: '맑음', location };\n  }\n});\n\n// 실행\nconst result = await robota.run('서울의 날씨가 어때요?');\nconsole.log(result); // AI가 getWeather 함수를 호출하고 결과를 응답에 포함합니다.\n"}]}],"\n",["$","h2",null,{"id":"고급-설정","children":["$","a",null,{"href":"#고급-설정","children":"고급 설정"}]}],"\n",["$","h3",null,{"id":"스트리밍-응답-사용","children":["$","a",null,{"href":"#스트리밍-응답-사용","children":"스트리밍 응답 사용"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, MCPProvider } from 'robota';\nimport { Client, StdioClientTransport } from '@modelcontextprotocol/sdk';\n\n// MCP 클라이언트 생성\nconst transport = new StdioClientTransport(/* 설정 */);\nconst mcpClient = new Client(transport);\n\n// MCP 제공자 초기화\nconst provider = new MCPProvider({\n  type: 'client',\n  client: mcpClient,\n  model: 'model-name'\n});\n\n// Robota 인스턴스 생성\nconst robota = new Robota({ provider });\n\n// 스트리밍 응답 처리\nconst stream = await robota.stream('긴 이야기를 해주세요.');\n\nfor await (const chunk of stream) {\n  process.stdout.write(chunk.content || '');\n}\n"}]}],"\n",["$","h2",null,{"id":"주의사항","children":["$","a",null,{"href":"#주의사항","children":"주의사항"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"MCP 제공자를 사용할 때는 반드시 MCP 클라이언트 또는 OpenAPI 스키마를 제공해야 합니다."}],"\n",["$","li",null,{"children":["클라이언트 타입(",["$","code",null,{"children":"type"}]," 옵션)은 'client' 또는 'openapi' 중 하나여야 합니다."]}],"\n",["$","li",null,{"children":"사용하는 MCP 구현체에 따라 지원되는 기능이 다를 수 있습니다."}],"\n"]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"mcp provider - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
