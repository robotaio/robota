3:I[6601,[],""]
5:I[7078,[],""]
6:I[7065,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
7:I[7306,["558","static/chunks/558-671780cd7fdea0cf.js","998","static/chunks/app/docs/layout-a14e5073c8ff962f.js"],""]
8:I[4561,["558","static/chunks/558-671780cd7fdea0cf.js","931","static/chunks/app/page-6deb6f2212da67a6.js"],""]
4:["slug","protocols/model-context-protocol","c"]
0:["NDNDpjy0SHJQJtd58PhEm",[[["",{"children":["docs",{"children":[["slug","protocols/model-context-protocol","c"],{"children":["__PAGE__?{\"slug\":[\"protocols\",\"model-context-protocol\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","protocols/model-context-protocol","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}]],null]]},[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[],"styles":null}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"모델-컨텍스트-프로토콜-model-context-protocol","children":["$","a",null,{"href":"#모델-컨텍스트-프로토콜-model-context-protocol","children":"모델 컨텍스트 프로토콜 (Model Context Protocol)"}]}],"\n",["$","p",null,{"children":"모델 컨텍스트 프로토콜(MCP)은 다양한 AI 모델과 일관된 방식으로 통신하기 위한 Robota의 표준화된 방법입니다. 이 프로토콜을 통해 서로 다른 AI 제공업체 간의 호환성을 보장하고, 모델 간 전환을 쉽게 할 수 있습니다."}],"\n",["$","h2",null,{"id":"프로토콜-개요","children":["$","a",null,{"href":"#프로토콜-개요","children":"프로토콜 개요"}]}],"\n",["$","p",null,{"children":"MCP는 다음 요소로 구성됩니다:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"메시지 형식"}]," - 사용자와 AI 간의 대화를 구조화하는 방법"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"함수 스키마"}]," - 함수와 도구의 정의를 표현하는 방법"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"컨텍스트 관리"}]," - 대화 컨텍스트와 상태를 관리하는 방법"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"응답 형식"}]," - AI의 응답을 구조화하는 방법"]}],"\n"]}],"\n",["$","h2",null,{"id":"메시지-형식","children":["$","a",null,{"href":"#메시지-형식","children":"메시지 형식"}]}],"\n",["$","p",null,{"children":"MCP에서 메시지는 다음과 같은 구조를 가집니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface Message {\n  role: 'user' | 'assistant' | 'system' | 'function';\n  content: string;\n  name?: string;  // function 호출인 경우 함수 이름\n  functionCall?: {\n    name: string;\n    arguments: Record<string, any>;\n  };\n  functionResult?: any;\n}\n"}]}],"\n",["$","p",null,{"children":"예시:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 사용자 메시지\nconst userMessage: Message = {\n  role: 'user',\n  content: '서울의 날씨가 어때?'\n};\n\n// 시스템 메시지\nconst systemMessage: Message = {\n  role: 'system',\n  content: '당신은 도움이 되는 AI 비서입니다.'\n};\n\n// 함수 호출을 포함한 어시스턴트 메시지\nconst assistantMessage: Message = {\n  role: 'assistant',\n  content: '서울의 날씨를 확인해보겠습니다.',\n  functionCall: {\n    name: 'getWeather',\n    arguments: { location: '서울' }\n  }\n};\n\n// 함수 결과 메시지\nconst functionMessage: Message = {\n  role: 'function',\n  name: 'getWeather',\n  content: JSON.stringify({ temperature: 25, condition: '맑음' })\n};\n"}]}],"\n",["$","h2",null,{"id":"함수-스키마","children":["$","a",null,{"href":"#함수-스키마","children":"함수 스키마"}]}],"\n",["$","p",null,{"children":"MCP는 함수를 JSON 스키마 형식으로 정의합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface FunctionSchema {\n  name: string;\n  description?: string;\n  parameters: {\n    type: 'object';\n    properties: Record<string, {\n      type: string;\n      description?: string;\n      enum?: any[];\n      default?: any;\n      // 추가 JSON 스키마 속성\n    }>;\n    required?: string[];\n  };\n}\n"}]}],"\n",["$","p",null,{"children":"예시:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"const weatherFunctionSchema: FunctionSchema = {\n  name: 'getWeather',\n  description: '특정 위치의 현재 날씨 정보를 가져옵니다',\n  parameters: {\n    type: 'object',\n    properties: {\n      location: {\n        type: 'string',\n        description: '날씨를 확인할 도시 이름 (예: 서울, 부산)'\n      },\n      unit: {\n        type: 'string',\n        description: '온도 단위',\n        enum: ['celsius', 'fahrenheit'],\n        default: 'celsius'\n      }\n    },\n    required: ['location']\n  }\n};\n"}]}],"\n",["$","h2",null,{"id":"컨텍스트-관리","children":["$","a",null,{"href":"#컨텍스트-관리","children":"컨텍스트 관리"}]}],"\n",["$","p",null,{"children":"MCP에서 컨텍스트는 대화의 상태를 나타내며, 다음 요소를 포함합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface Context {\n  messages: Message[];            // 지금까지의 대화 기록\n  functions?: FunctionSchema[];   // 사용 가능한 함수 목록\n  systemPrompt?: string;          // 단일 시스템 프롬프트\n  systemMessages?: Message[];     // 여러 시스템 메시지\n  metadata?: Record<string, any>; // 추가 메타데이터\n}\n"}]}],"\n",["$","h3",null,{"id":"시스템-메시지-관리","children":["$","a",null,{"href":"#시스템-메시지-관리","children":"시스템 메시지 관리"}]}],"\n",["$","p",null,{"children":"Robota는 단일 시스템 프롬프트와 여러 시스템 메시지를 모두 지원합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 단일 시스템 프롬프트 설정\nrobota.setSystemPrompt('당신은 도움이 되는 AI 어시스턴트입니다.');\n\n// 여러 시스템 메시지 설정\nrobota.setSystemMessages([\n  { role: 'system', content: '당신은 전문 데이터 분석가입니다.' },\n  { role: 'system', content: '사용자가 데이터 분석 관련 질문을 할 때마다 단계별로 설명해주세요.' }\n]);\n\n// 기존 시스템 메시지에 추가\nrobota.addSystemMessage('항상 정확한 정보를 제공하려고 노력하세요.');\n"}]}],"\n",["$","p",null,{"children":"Robota 인스턴스 생성 시 시스템 메시지를 설정할 수도 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// 단일 시스템 프롬프트로 초기화\nconst robota1 = new Robota({\n  provider: provider,\n  systemPrompt: '당신은 도움이 되는 AI 어시스턴트입니다.'\n});\n\n// 여러 시스템 메시지로 초기화\nconst robota2 = new Robota({\n  provider: provider,\n  systemMessages: [\n    { role: 'system', content: '당신은 전문 데이터 분석가입니다.' },\n    { role: 'system', content: '사용자가 데이터 분석 관련 질문을 할 때마다 단계별로 설명해주세요.' }\n  ]\n});\n"}]}],"\n",["$","h2",null,{"id":"응답-형식","children":["$","a",null,{"href":"#응답-형식","children":"응답 형식"}]}],"\n",["$","p",null,{"children":"모델의 응답은 다음과 같은 구조로 표준화됩니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"interface ModelResponse {\n  content?: string;               // 텍스트 응답\n  functionCall?: {                // 함수 호출 (있는 경우)\n    name: string;\n    arguments: Record<string, any>;\n  };\n  usage?: {                       // 토큰 사용량 정보\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n  metadata?: Record<string, any>; // 추가 메타데이터\n}\n"}]}],"\n",["$","h2",null,{"id":"제공업체-간-프로토콜-변환","children":["$","a",null,{"href":"#제공업체-간-프로토콜-변환","children":"제공업체 간 프로토콜 변환"}]}],"\n",["$","p",null,{"children":"Robota는 각 AI 제공업체의 고유한 API 형식과 MCP 간의 변환을 자동으로 처리합니다. 예를 들어, OpenAI와 Anthropic은 서로 다른 메시지 형식을 사용하지만, Robota는 이를 MCP로 표준화합니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"// OpenAI 형식에서 MCP로 변환\nfunction openaiToMCP(openaiResponse) {\n  return {\n    content: openaiResponse.choices[0].message.content,\n    functionCall: openaiResponse.choices[0].message.function_call\n      ? {\n          name: openaiResponse.choices[0].message.function_call.name,\n          arguments: JSON.parse(openaiResponse.choices[0].message.function_call.arguments)\n        }\n      : undefined,\n    usage: {\n      promptTokens: openaiResponse.usage.prompt_tokens,\n      completionTokens: openaiResponse.usage.completion_tokens,\n      totalTokens: openaiResponse.usage.total_tokens\n    }\n  };\n}\n\n// MCP에서 Anthropic 형식으로 변환\nfunction mcpToAnthropic(mcpContext) {\n  return {\n    messages: mcpContext.messages.map(message => {\n      if (message.role === 'user') {\n        return { role: 'human', content: message.content };\n      } else if (message.role === 'assistant') {\n        return { role: 'assistant', content: message.content };\n      }\n      // 기타 변환 로직\n    }),\n    system: mcpContext.systemPrompt\n  };\n}\n"}]}],"\n",["$","h2",null,{"id":"커스텀-모델-통합하기","children":["$","a",null,{"href":"#커스텀-모델-통합하기","children":"커스텀 모델 통합하기"}]}],"\n",["$","p",null,{"children":"새로운 AI 모델을 Robota에 통합하려면 해당 모델의 API와 MCP 간의 변환 로직을 구현해야 합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { BaseProvider, ModelContextProtocol } from 'robota';\n\nclass CustomModelProvider extends BaseProvider implements ModelContextProtocol {\n  // MCP 컨텍스트를 모델 고유 형식으로 변환\n  convertContextToModelFormat(context) {\n    // 변환 로직 구현\n    return customFormat;\n  }\n\n  // 모델 응답을 MCP 형식으로 변환\n  convertModelResponseToMCP(modelResponse) {\n    // 변환 로직 구현\n    return mcpResponse;\n  }\n  \n  // 기타 필요한 메서드 구현\n}\n"}]}],"\n",["$","h2",null,{"id":"mcp의-이점","children":["$","a",null,{"href":"#mcp의-이점","children":"MCP의 이점"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"제공업체 독립성"}]," - 애플리케이션 코드를 변경하지 않고 다른 AI 모델로 전환 가능"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"표준화된 인터페이스"}]," - 일관된 방식으로 모든 AI 모델과 상호작용"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"확장성"}]," - 새로운 모델과 제공업체를 쉽게 통합"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"이식성"}]," - 다양한 환경에서 동일한 코드를 재사용"]}],"\n"]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"model context protocol - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
