3:I[8822,[],""]
5:I[7424,[],""]
6:I[9373,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
7:I[6519,["696","static/chunks/696-d43650737205c45a.js","998","static/chunks/app/docs/layout-1f8ff14ac451f43d.js"],"default"]
8:I[4575,["696","static/chunks/696-d43650737205c45a.js","931","static/chunks/app/page-718fde6e5e1a891e.js"],""]
4:["slug","openapi-integration","c"]
0:["GlAq3AXZPAL2oW9VuTyQj",[[["",{"children":["docs",{"children":[["slug","openapi-integration","c"],{"children":["__PAGE__?{\"slug\":[\"openapi-integration\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["slug","openapi-integration","c"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-8 flex","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-1 min-w-0","children":["$","div",null,{"className":"markdown-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]}]]}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/robota/_next/static/css/825b8367eaa548fa.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-5xl font-bold mb-6","children":"404"}],["$","p",null,{"className":"text-xl mb-8","children":"페이지를 찾을 수 없습니다."}],["$","$L8",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors","children":"홈으로 돌아가기"}]]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$L9",null]]]]
a:T4fb,import { Robota, OpenAIProvider, OpenAPIToolkit } from 'robota';
import dotenv from 'dotenv';
dotenv.config();

async function createWeatherAgent() {
  // 날씨 API 도구 생성
  const weatherTools = await OpenAPIToolkit.fromURL('https://api.weatherapi.com/v1/openapi.json', {
    authentication: new APIAuthentication.ApiKey({
      name: 'key',
      value: process.env.WEATHER_API_KEY,
      in: 'query'
    }),
    includePaths: ['/current.json', '/forecast.json'],
    nameMapping: {
      '/current.json': 'getCurrentWeather',
      '/forecast.json': 'getWeatherForecast'
    }
  });

  // Robota 인스턴스 생성 및 도구 등록
  const robota = new Robota({
    provider: new OpenAIProvider({
      apiKey: process.env.OPENAI_API_KEY,
      model: 'gpt-4'
    }),
    systemPrompt: '당신은 날씨 정보를 제공하는 도우미입니다. 사용자에게 유용한 날씨 정보를 알려주세요.'
  });

  robota.registerTools(weatherTools);
  
  return robota;
}

// 날씨 에이전트 사용
async function main() {
  const weatherAgent = await createWeatherAgent();
  
  const result = await weatherAgent.run('서울의 오늘 날씨는 어때? 그리고 내일은 비가 올 예정이야?');
  console.log(result);
}

main().catch(console.error);
2:["$","article",null,{"className":"markdown-content","children":[false,[["$","h1",null,{"id":"openapi-통합","children":["$","a",null,{"href":"#openapi-통합","children":"OpenAPI 통합"}]}],"\n",["$","p",null,{"children":"Robota는 OpenAPI(이전의 Swagger) 스펙을 자동으로 AI 에이전트의 도구와 함수로 변환하는 기능을 제공합니다. 이를 통해 기존 API를 쉽게 AI 에이전트에 연결하고 활용할 수 있습니다."}],"\n",["$","h2",null,{"id":"openapi란","children":["$","a",null,{"href":"#openapi란","children":"OpenAPI란?"}]}],"\n",["$","p",null,{"children":"OpenAPI는 RESTful API를 설명하기 위한 표준화된 스펙으로, API의 엔드포인트, 요청 매개변수, 응답 형식 등을 JSON 또는 YAML 형식으로 정의합니다. 이 스펙을 통해 API 문서 생성, 클라이언트 코드 생성, API 테스트 등이 가능합니다."}],"\n",["$","h2",null,{"id":"robota의-openapi-통합-기능","children":["$","a",null,{"href":"#robota의-openapi-통합-기능","children":"Robota의 OpenAPI 통합 기능"}]}],"\n",["$","p",null,{"children":"Robota는 OpenAPI 스펙을 분석하여 각 API 엔드포인트를 AI 에이전트가 사용할 수 있는 함수로 자동 변환합니다. 이렇게 변환된 함수를 통해 AI는 API를 직접 호출하고 결과를 처리할 수 있습니다."}],"\n",["$","h2",null,{"id":"openapi-도구-생성하기","children":["$","a",null,{"href":"#openapi-도구-생성하기","children":"OpenAPI 도구 생성하기"}]}],"\n",["$","h3",null,{"id":"url에서-openapi-스펙-로드","children":["$","a",null,{"href":"#url에서-openapi-스펙-로드","children":"URL에서 OpenAPI 스펙 로드"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAIProvider, OpenAPIToolkit } from 'robota';\n\n// OpenAPI 스펙에서 도구 생성\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json');\n\n// Robota 인스턴스 생성 및 도구 등록\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n\nrobota.registerTools(apiTools);\n\n// 이제 AI는 API를 호출할 수 있습니다\nconst result = await robota.run('오늘 날씨가 어떤가요?');\n"}]}],"\n",["$","h3",null,{"id":"로컬-파일에서-openapi-스펙-로드","children":["$","a",null,{"href":"#로컬-파일에서-openapi-스펙-로드","children":"로컬 파일에서 OpenAPI 스펙 로드"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAIProvider, OpenAPIToolkit } from 'robota';\nimport fs from 'fs';\n\n// 로컬 파일에서 OpenAPI 스펙 로드\nconst specPath = './api-specs/weather-api.json';\nconst apiSpec = JSON.parse(fs.readFileSync(specPath, 'utf-8'));\n\n// OpenAPI 스펙에서 도구 생성\nconst apiTools = await OpenAPIToolkit.fromSpec(apiSpec);\n\n// Robota 인스턴스에 도구 등록\nconst robota = new Robota({\n  provider: new OpenAIProvider({\n    apiKey: process.env.OPENAI_API_KEY,\n    model: 'gpt-4'\n  })\n});\n\nrobota.registerTools(apiTools);\n"}]}],"\n",["$","h2",null,{"id":"api-인증-설정","children":["$","a",null,{"href":"#api-인증-설정","children":"API 인증 설정"}]}],"\n",["$","p",null,{"children":"많은 API는 인증이 필요합니다. Robota는 다양한 인증 방식을 지원합니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAPIToolkit, APIAuthentication } from 'robota';\n\n// API 키 인증\nconst apiKeyAuth = new APIAuthentication.ApiKey({\n  name: 'api_key',\n  value: process.env.API_KEY,\n  in: 'header' // 'header', 'query', 'cookie' 중 하나\n});\n\n// Bearer 토큰 인증\nconst bearerAuth = new APIAuthentication.Bearer({\n  token: process.env.BEARER_TOKEN\n});\n\n// 기본 인증\nconst basicAuth = new APIAuthentication.Basic({\n  username: process.env.API_USERNAME,\n  password: process.env.API_PASSWORD\n});\n\n// OAuth2 인증\nconst oauthAuth = new APIAuthentication.OAuth2({\n  token: process.env.OAUTH_TOKEN\n});\n\n// 인증 정보와 함께 도구 생성\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json', {\n  authentication: apiKeyAuth\n});\n"}]}],"\n",["$","h2",null,{"id":"세분화된-api-액세스-제어","children":["$","a",null,{"href":"#세분화된-api-액세스-제어","children":"세분화된 API 액세스 제어"}]}],"\n",["$","p",null,{"children":"특정 API 엔드포인트만 AI에게 노출하도록 제한할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAPIToolkit } from 'robota';\n\n// 특정 경로만 포함\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json', {\n  includePaths: ['/weather/*', '/locations/search'],\n  excludePaths: ['/admin/*', '/users/*']\n});\n"}]}],"\n",["$","h2",null,{"id":"엔드포인트-이름-변경-및-설명-추가","children":["$","a",null,{"href":"#엔드포인트-이름-변경-및-설명-추가","children":"엔드포인트 이름 변경 및 설명 추가"}]}],"\n",["$","p",null,{"children":"더 명확한 도구 이름과 설명을 제공할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAPIToolkit } from 'robota';\n\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json', {\n  nameMapping: {\n    '/weather/{city}': 'getWeatherByCity',\n    '/locations/search': 'searchLocations'\n  },\n  descriptionEnhancement: {\n    '/weather/{city}': '지정된 도시의 현재 날씨 정보를 가져옵니다. 도시 이름은 한글 또는 영어로 입력할 수 있습니다.'\n  }\n});\n"}]}],"\n",["$","h2",null,{"id":"응답-변환-및-후처리","children":["$","a",null,{"href":"#응답-변환-및-후처리","children":"응답 변환 및 후처리"}]}],"\n",["$","p",null,{"children":"API 응답을 가공하여 AI에게 더 유용한 형태로 제공할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAPIToolkit } from 'robota';\n\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json', {\n  responseTransformers: {\n    '/weather/{city}': (response) => {\n      // 응답 데이터 변환\n      return {\n        temperature: response.data.temp,\n        condition: response.data.weather[0].description,\n        location: response.data.name,\n        summary: `${response.data.name}의 현재 날씨는 ${response.data.weather[0].description}이고, 기온은 ${response.data.temp}°C입니다.`\n      };\n    }\n  }\n});\n"}]}],"\n",["$","h2",null,{"id":"에러-처리","children":["$","a",null,{"href":"#에러-처리","children":"에러 처리"}]}],"\n",["$","p",null,{"children":"API 호출 중 발생하는 오류를 적절히 처리할 수 있습니다:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"import { Robota, OpenAPIToolkit } from 'robota';\n\nconst apiTools = await OpenAPIToolkit.fromURL('https://api.example.com/openapi.json', {\n  errorHandlers: {\n    '/weather/{city}': (error) => {\n      if (error.response?.status === 404) {\n        return { error: '도시를 찾을 수 없습니다. 도시 이름을 다시 확인해주세요.' };\n      }\n      if (error.response?.status === 401) {\n        return { error: 'API 키가 유효하지 않습니다.' };\n      }\n      return { error: '날씨 정보를 가져오는 중 오류가 발생했습니다.' };\n    }\n  }\n});\n"}]}],"\n",["$","h2",null,{"id":"실제-사용-예시","children":["$","a",null,{"href":"#실제-사용-예시","children":"실제 사용 예시"}]}],"\n",["$","p",null,{"children":"OpenAPI로 정의된 날씨 API를 활용하는 에이전트 구현:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-typescript","children":"$a"}]}]]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"openapi integration - Robota"}],["$","meta","3",{"name":"description","content":"Robota 문서 및 API 참조"}]]
1:null
